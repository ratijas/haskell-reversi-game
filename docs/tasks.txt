Tasks

a. game logic

a.1. board, player, discs models
a.2. state storage:
      - in-memory (hashmap etc)
      - sqlite3
a.3. algorithms:
      - available moves
      - turn validation :: Board -> Player -> Location -> Bool
        turn validation = check that player can put a disc on this location
      - test for game over
      - who is next player:
        if no available moves, same player moves twice.
        if no available moves for both players, it's a draw.
a.4.[*] keep track of time per turn ([**] and per game) for timeouts.


b. server

b.1. wrap game logic (a) in REST API.
b.2. handle authorization header.


c. web client

c.1. simple static HTML web page
c.1.1. board is HTML table
c.1.2. tables cells are board cells, each cell implements on('click') handler
c.1.3. available moves highlight cells
c.2. JS scripts with AJAX
c.3.[*] CSS animations for discs flips


d. telegram client

d.1. bazicali same as web client
d.2. inline keyboards
d.3. all game fits in one message which gets updates on every turn
d.4. message text contains history of all turns, information about other player and current game status (including whose turn now)
d.5. message keyboard is 8x8 game board with emoji discs.
d.5.1. each button has callback data in form of "[A-H][1-8]"
d.5.2. black player's discs marked as ⚪
d.5.3. white player's discs marked as ⚫️
d.5.4. available turns marked as ⭕️
d.5.5. empty cells filled with spaces like %20 or Unicode &nbsp;
d.6. commands:
d.6.1. /start - activate the bot
d.6.2. /list - list on-line players
d.6.3. /invite xxxx - invite user xxxx
d.6.4. /accept xxxx, /reject xxxx - reply to an invitation
d.6.5. /game - resend current game board
d.6.6. /surrender - self-explanatory
